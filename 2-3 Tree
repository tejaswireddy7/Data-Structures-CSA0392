#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int *keys;
    struct Node **children;
    int numKeys;
    int isLeaf;
} Node;
Node* createNode(int isLeaf) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->keys = (int*)malloc(3 * sizeof(int));
    newNode->children = (Node**)malloc(4 * sizeof(Node*));
    newNode->numKeys = 0;
    newNode->isLeaf = isLeaf;
    return newNode;
}
void splitChild(Node* parent, int index, Node* child) {
    Node* newChild = createNode(child->isLeaf);
    newChild->numKeys = 1;
    newChild->keys[0] = child->keys[1];
    if (!child->isLeaf) {
        for (int j = 0; j < 2; j++) {
            newChild->children[j] = child->children[j + 2];
        }
    }
    child->numKeys = 1;
    for (int j = parent->numKeys; j >= index + 1; j--) {
        parent->children[j + 1] = parent->children[j];
    }
    parent->children[index + 1] = newChild;

    for (int j = parent->numKeys - 1; j >= index; j--) {
        parent->keys[j + 1] = parent->keys[j];
    }
    parent->keys[index] = child->keys[0];
    parent->numKeys++;
}
void insertNonFull(Node* node, int key) {
    int i = node->numKeys - 1;
    if (node->isLeaf) {
        while (i >= 0 && key < node->keys[i]) {
            node->keys[i + 1] = node->keys[i];
            i--;
        }
        node->keys[i + 1] = key;
        node->numKeys++;
    } else {
        while (i >= 0 && key < node->keys[i]) {
            i--;
        }
        i++;
        if (node->children[i]->numKeys == 2) {
            splitChild(node, i, node->children[i]);
            if (key > node->keys[i]) {
                i++;
            }
        }
        insertNonFull(node->children[i], key);
    }
}
void insert(Node** root, int key) {
    if ((*root)->numKeys == 2) {
        Node* newRoot = createNode(0);
        newRoot->children[0] = *root;
        splitChild(newRoot, 0, *root);
        int i = 0;
        if (newRoot->keys[0] < key) {
            i++;
        }
        insertNonFull(newRoot->children[i], key);
        *root = newRoot;
    } else {
        insertNonFull(*root, key);
    }
}
void traverse(Node* root) {
    for (int i = 0; i < root->numKeys; i++) {
        if (!root->isLeaf) {
            traverse(root->children[i]);
        }
        printf("%d ", root->keys[i]);
    }
    if (!root->isLeaf) {
        traverse(root->children[root->numKeys]);
    }
}
int main() {
    Node* root = createNode(1);
    insert(&root, 10);
    insert(&root, 20);
    insert(&root, 5);
    insert(&root, 6);
    insert(&root, 12);
    insert(&root, 30);
    insert(&root, 7);
    insert(&root, 17);
    printf("Traversal of the 2-3 tree is: ");
    traverse(root);
    return 0;
}
