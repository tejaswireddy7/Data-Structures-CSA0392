#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100
typedef struct {
    int data[MAX_SIZE];
    int front;
    int rear;
} Q;
void initializeQueue(Q *queue) {
    queue->front = -1;
    queue->rear = -1;
}
int isEmpty(Q *queue) {
    return (queue->front == -1 && queue->rear == -1);
}
int isFull(Q *queue) {
    return (queue->rear == MAX_SIZE - 1);
}
void enqueue(Q *queue, int element) {
    if (isFull(queue)) {
        printf("Queue is full. Cannot insert element.\n");
        return;
    }
    if (isEmpty(queue)) {
        queue->front = 0;
        queue->rear = 0;
    } else {
        queue->rear++;
    }
    queue->data[queue->rear] = element;
}
void dequeue(Q *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Cannot delete element.\n");
        return;
    }
    if (queue->front == queue->rear) {
        queue->front = -1;
        queue->rear = -1;
    } else {
        queue->front++;
    }
}
void displayQueue(Q *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Contents of the queue: ");
    for (int i = queue->front; i <= queue->rear; i++) {
        printf("%d ", queue->data[i]);
    }
    printf("\n");
}
int main() {
    Q queue;
    initializeQueue(&queue);
    enqueue(&queue, 12);
    enqueue(&queue, 34);
    enqueue(&queue, 56);
    enqueue(&queue, 78);
    displayQueue(&queue);
    enqueue(&queue, 60);
    displayQueue(&queue);
    dequeue(&queue);
    displayQueue(&queue);
    return 0;
}
